#!gbuild
[Program]

	#---------------------------------------------------------------------------
	# These lines control how this application is linked. See the file
	# SOCFirmware\targets\memory_models\README.txt for a detailed explanation.
	#---------------------------------------------------------------------------

	--preprocess_linker_directive
    # Local files override.
	-Imemory_model
    # This enables local files to force using the application class files by
    # prefixing the application class name (e.g. "player\ocram.data.inc").
	-I$FRAMEWORKDIR\memory_models\vmi
    # This enables the main linker directive file to find the application
    # class files.
	-I$FRAMEWORKDIR\memory_models\vmi\player

    #---------------------------------------------------------------------------
    # There are no comments for these. I wish there were...
    #---------------------------------------------------------------------------

	-I.
	-I$OUTDIR\resource_unit_test

    #---------------------------------------------------------------------------
    # Define this as the player profile
    #---------------------------------------------------------------------------

# 	-DOS_SYSMGR_PLAYER_PROFILE=1

    #---------------------------------------------------------------------------
    # Put object files in the player-specific output directory.
    #---------------------------------------------------------------------------

	-object_dir=$OUTDIR\resource_unit_test\objs
	:outputDir=$OUTDIR\resource_unit_test\objs

    #---------------------------------------------------------------------------
    # Put binaries in the LIBDIR under player. I suspect it needs to go there
    # because our post-link analysis tools want to have a look at it within the
    # context of the other files generated by the link - but I don't know for
    # sure.
    #---------------------------------------------------------------------------

	:binDir=$OUTDIR\resource_unit_test
	#
	# Any libraries built by player will go here:
	{ filetype=Library } :binDir=$OUTDIR\resource_unit_test\libs
	#
	# So add this directory as a linker directory:
	-L$(OUTDIR)\resource_unit_test\libs
	#
	# And link with the libraries built by player:
	#-lasi_dffi_metadata.a
	# It is currently necessary to link asi_dffi_metadata this way,
	# because it is being built using a subproject using _build_lib.gpj technology, so
	# player.gpj doesn't know it exists.  If it were built directly by player,
	# then the -l would be unnecessary.

    #---------------------------------------------------------------------------
    # After creating the executable, we need to convert it to a .sb file that
    # we can burn to a compact flash card. This should *NOT* be done through
    # burn_cf.py - it should be done directly with elftosb, but no one has made
    # that fix yet. Apparently, burn_cf.py will be going away anyway when the
    # NAND work is integrated into the main branch.
    #---------------------------------------------------------------------------

	:postexecShell="$ROOT\\bin\\makesb $(CHIP_FAMILY) --jump=$OUTDIR\\resource_unit_test\\resource_unittest,0"

    #---------------------------------------------------------------------------
    # In this application, the System Manager uses some application-specific
    # messages and events.
    #---------------------------------------------------------------------------

#	-DOS_SYSMGR_APP_MESSAGES
#	-DOS_SYSMGR_APP_EVENTS

    #---------------------------------------------------------------------------
    # PMI BUILD    OPTION
    # If chosen, this will enable driver PMI support
    #   Currently used by UARTDBG
    #---------------------------------------------------------------------------

#	-DPMI_ENABLED

    #---------------------------------------------------------------------------
    # Selecting TSS Agents
    #---------------------------------------------------------------------------

	-DTSS_USE_LOGTEXT_AGENT

    #---------------------------------------------------------------------------
    # ASM MIXER Module
    #---------------------------------------------------------------------------

    #-DASI_MIXER_1
	-DASI_MIXER1_TO_FX
    #-DASI_MIXER1_TO_DAC
    #-DASI_BEEP
	-DASI_BEEP_TO_MIXER1

	#-------------------------------------------------------------
	# cmp_asi.a is built with MULTI_STREAM.  To get matching
	# versions of cmp_asi public structures, MULTI_STREAM must be
	# defined here, too.
	#-------------------------------------------------------------
	-DMULTI_STREAM

    #---------------------------------------------------------------------------
    # Record Support for FM Tuner Mode
    #---------------------------------------------------------------------------
# 	-DSTFM_RECORD

    #---------------------------------------------------------------------------
    # ASM MIXER Thread Control
    #---------------------------------------------------------------------------

# 	-DASI_MIXER_NO_INPUT_GAIN
# 	-DASI_MIXER_NO_OUTPUT_GAIN

    #---------------------------------------------------------------------------
    # ASM BEEP Thread Control
    #---------------------------------------------------------------------------

# 	-DASI_BEEP_CONST

    #---------------------------------------------------------------------------
    # UI Agent Support; Only valid if TSS_USE_UI_AGENT is defined
    #---------------------------------------------------------------------------

#	-DTSS_LED_SUPPORT
#   -DTSS_ROTARY_SUPPORT

    #---------------------------------------------------------------------------
    # ASM Mode Support
    #---------------------------------------------------------------------------
# 	-DASI_MODE_PLAYBACK
# 	-DASI_MODE_RECORD
# 	-DASI_MODE_STFM

    #---------------------------------------------------------------------------
    # VMI (Virtual Memory Interface) Options
    #
    #  VMI_WITH_SDRAM - enables VMI to work with SDRAM (only thing supported right now)
    #  OS_VMI_ENABLED - not defining this removes VMI _entirely_
    #  PAGE_ALL - uncomment if you want to debug code managed by VMI
    #  SDRAM_VIRT_SZ_MB - we pretend SDRAM is this big
    #  SDRAM_PHYS_SZ_MB - SDRAM is physically this big
    #---------------------------------------------------------------------------

	-DVMI_WITH_SDRAM
	-DOS_VMI_ENABLED
#   -DPAGE_ALL
	-Wl,"-C SDRAM_VIRT_SZ_MB=0x200000"
	-Wl,"-C SDRAM_PHYS_SZ_MB=0x2000000"
	-DTX_TIMER_THREAD_PRIORITY=4

    #---------------------------------------------------------------------------
    # ETM BUILD    OPTION
    # If chosen, this will disable UART-DBG RX and the LCD
    #---------------------------------------------------------------------------

    #-DBUILD_FOR_ETM

    #---------------------------------------------------------------------------
    # Make room for 50 subscriptions.
    #---------------------------------------------------------------------------

	-DEOI_MAX_SUBSCRIPTIONS=50

    #---------------------------------------------------------------------------
    # ARM/THUMB Build mode selection
    #---------------------------------------------------------------------------

	-thumb
	-thumb_lib

    #---------------------------------------------------------------------------
    # Before the link, make sure the libraries are up-to-date.
    #---------------------------------------------------------------------------

#	:preexecShell='\\GHS\\arm407\\gbuild -parallel=4 -top $(ROOT)\\projects\\common\\all_build_libs.gpj'

    #---------------------------------------------------------------------------
    # After the link, produce a detailed report.
    #---------------------------------------------------------------------------

#	:postexecShell='$ROOT\\bin\\ghs_analyze.py -oproject\\example1\\vmi\\$LIBDIR\\example1.txt -s $ROOT\\bin\\map_analyzer.cfg project\\example1\\vmi\\$LIBDIR\\example1.map'

    #---------------------------------------------------------------------------
    # A hack to get around a hack of incomplete code merged in.
    #---------------------------------------------------------------------------
	-DNON_UTF16_BUILD
#-------------------------------------------------------------------------------

# SCOPING BUILD OPTIONS
#   -DBUILD_FOR_EQ_SCOPE

#Idle task - Create and Start and Idle thread. Used to measure the amount of
# Slack in System for System Profiling.
#    -DENABLE_SYSTEM_IDLE_THREAD

src\my_resources.gpj		[Resource Bundle]
os\filesystem\output_resource_unit_test\resource_unit_test\firmware.rsc
	-n g_ResourceFile
	-o resource_file.h
os\filesystem\resource\os_resource_use_lib.gpj		[Subproject]
os\filesystem\os_filesystem_steering_use_lib.gpj		[Subproject]
drivers\media\DDILDL\ddi_ldl_use_lib.gpj		[Subproject]
components\lru\cmp_lru_use_lib.gpj		[Subproject]
drivers\media\nand\ddi_nand_use_lib.gpj		[Subproject]
hw\laserfuse\hw_lfi_private_use_lib.gpj		[Subproject]
hw\laserfuse\hw_lfi_use_lib.gpj		[Subproject]
src\rsrc_mgr_unit_test.c
src\resource_unit_test_PreTxInit.c
drivers\media\nand\ddi_nand_media_definition.c
src\unit_test_ddildl.c
drivers\media\nand\hal\sync_objects\ddi_nand_hal_test_stubs.c
$FRAMEWORKDIR\basic_os_common.gpj		[Subproject]
$FRAMEWORKDIR\basic_os_libs.gpj		[Subproject]
#projects\common\example1_libs.gpj		[Subproject]
#  src\pmi_player_state_table.c
targets\stampy\ladder\ddi_ladder_stampy.gpj		[Subproject]
$OUTDIR\resource_unit_test\resource_unit_test.map

